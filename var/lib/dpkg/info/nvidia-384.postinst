#!/bin/sh
# Copyright (C) 2007-2008 Mario Limonciello
# Copyright (C) 2009 Canonical Ltd
# Authors: Alberto Milone
set -e

PACKAGE_NAME=nvidia-384
CVERSION=`dpkg-query -W -f='${Version}' $PACKAGE_NAME | awk -F "-" '{print $1}' | cut -d\: -f2`
CVERSION=${CVERSION#*really.}

NVPD_USER="nvidia-persistenced"

INIT_DIR="/lib/systemd/system"
INIT_SCRIPT_NAME="$PACKAGE_NAME.service"
INIT_SCRIPT="$INIT_DIR/$INIT_SCRIPT_NAME"
TMP_FILE="/tmp/do_not_build_dkms_module"

ARCH=`dpkg --print-architecture`
case $ARCH in
    amd64)
        ARCH="x86_64"
        ;;
    lpia)
        ARCH="i686"
        ;;
    i386)
        ARCH="i686"
        ;;
    armhf)
        ARCH="armhf"
        ;;
    *)
        echo "WARNING: unsupported arch: $ARCH"
        ARCH="$ARCH"
        ;;
esac

# Check the existence of a kernel named as $1
_is_kernel_name_correct() {
    CORRECT="no"
    KERNEL_NAME=$1
    
    for kernel in /boot/config-*; do
        [ -f "$kernel" ] || continue
        KERNEL=${kernel#*-}
        if [ "${KERNEL}" = "${KERNEL_NAME}" ]; then
            CORRECT="yes"
            break
        fi
    done

    echo $CORRECT
}

# Get the most recent kernel on Debian based systems. This keeps
# into account both the version and the ABI. If the current kernel
# is the most recent kernel then the function will print a null string.
_get_newest_kernel_debian() {
    NEWEST_KERNEL=
    NEWEST_VERSION=
    NEWEST_ABI=
    
    for kernel in /boot/config-*; do
        [ -f "$kernel" ] || continue
        KERNEL=${kernel#*-}
        KERNEL_VERSION=${KERNEL%%-*}
        ABI=${KERNEL#*-}
        ABI=${ABI%%-*}

        if [ -z "$NEWEST_KERNEL" ]; then
            # The 1st time get a version which is bigger than $1
            COMPARE_TO=$1
        else
            # Get the biggest version
            COMPARE_TO="$NEWEST_VERSION-$NEWEST_ABI"
        fi
            
        # if $kernel is greater than $COMPARE_TO
        if [ `dpkg --compare-versions "$KERNEL_VERSION-$ABI" gt "$COMPARE_TO" && echo "yes" || \
              echo "no"` = "yes" ]; then
            NEWEST_KERNEL=$KERNEL
            NEWEST_VERSION=$KERNEL_VERSION
            NEWEST_ABI=$ABI
        fi
    done

    echo "$NEWEST_KERNEL"
}


get_newest_kernel() {
    NEWEST_KERNEL=
    # Try Debian first as rpm can be installed in Debian based distros
    if [ -e /usr/bin/dpkg ]; then
        # If DEB based
        CURRENT_KERNEL=$1
        CURRENT_VERSION=${CURRENT_KERNEL%%-*}
        CURRENT_ABI=${CURRENT_KERNEL#*-}
        CURRENT_FLAVOUR=${CURRENT_ABI#*-}
        CURRENT_ABI=${CURRENT_ABI%%-*}
        NEWEST_KERNEL=$(_get_newest_kernel_debian "$CURRENT_VERSION-$CURRENT_ABI")

    elif [ `which rpm &>/dev/null` ]; then
        # If RPM based
        NEWEST_KERNEL=$(_get_newest_kernel_rhel)
    fi

    # Make sure that kernel name that we extracted corresponds to an installed
    # kernel
    if [ -n "$NEWEST_KERNEL" ] && [ `_is_kernel_name_correct $NEWEST_KERNEL` = "no" ]; then
        NEWEST_KERNEL=
    fi

    echo $NEWEST_KERNEL
}

case "$1" in
    configure)
        # Deal with alternatives

        # Clean up any previous non-multi-arch alternatives
        if [ -n "$(update-alternatives --list gl_conf 2>/dev/null)" ]; then
            set -a $(update-alternatives --list gl_conf 2>/dev/null)
            while [ $# -ge 1 ] && [ "$#" != "configure" ]; do
                ALTERNATIVE=${1}
                update-alternatives --remove gl_conf $ALTERNATIVE
                shift
            done
        fi

        # Deal with multi-arch ugliness until dpkg supports multi-arch:
        # - On amd64 we need to install an additional slave link for 32bit vdpau
        #   which - obviously - doesn't exist on i386
        # - It is fine if we get the following:
        #   +  warning: skip creation of /usr/lib32/vdpau/libvdpau_nvidia.so.1 because associated
        #   +  file /usr/lib32/nvidia-384/vdpau/libvdpau_nvidia.so.1 (of link group gl_conf) doesn't exist.
        #
        update-alternatives --force \
            --install /etc/ld.so.conf.d/x86_64-linux-gnu_GL.conf x86_64-linux-gnu_gl_conf /usr/lib/nvidia-384/ld.so.conf 8604 \
            --slave /usr/share/man/man1/nvidia-xconfig.1.gz x86_64-linux-gnu_man_nvidiaxconfig.gz /usr/share/man/man1/alt-nvidia-384-xconfig.1.gz \
            --slave /usr/share/man/man1/nvidia-smi.1.gz x86_64-linux-gnu_nvidia-smi.1.gz /usr/share/man/man1/alt-nvidia-384-smi.1.gz \
            --slave /usr/share/man/man1/nvidia-cuda-mps-control.1.gz x86_64-linux-gnu_nvidia-cuda-mps-control.1.gz /usr/share/man/man1/alt-nvidia-384-cuda-mps-control.1.gz \
            --slave /usr/share/man/man1/nvidia-persistenced.1.gz x86_64-linux-gnu_man_persistenced.gz /usr/share/man/man1/alt-nvidia-384-persistenced.1.gz \
            --slave /usr/bin/nvidia-smi x86_64-linux-gnu_nvidia_smi /usr/lib/nvidia-384/bin/nvidia-smi \
            --slave /usr/bin/nvidia-xconfig x86_64-linux-gnu_nvidia_xconfig /usr/lib/nvidia-384/bin/nvidia-xconfig \
            --slave /usr/bin/nvidia-bug-report.sh x86_64-linux-gnu_nvidia_bug_report /usr/lib/nvidia-384/bin/nvidia-bug-report.sh \
            --slave /usr/bin/nvidia-debugdump x86_64-linux-gnu_nvidia-debugdump /usr/lib/nvidia-384/bin/nvidia-debugdump \
            --slave /usr/bin/nvidia-cuda-mps-control x86_64-linux-gnu_nvidia-cuda-mps-control /usr/lib/nvidia-384/bin/nvidia-cuda-mps-control \
            --slave /usr/bin/nvidia-cuda-mps-server x86_64-linux-gnu_nvidia-cuda-mps-server /usr/lib/nvidia-384/bin/nvidia-cuda-mps-server \
            --slave /usr/bin/nvidia-persistenced x86_64-linux-gnu_nvidia_persistenced /usr/lib/nvidia-384/bin/nvidia-persistenced \
            --slave /usr/share/nvidia/nvidia-application-profiles-384.130-rc x86_64-linux-gnu_nvidia_app_profile /usr/share/nvidia-384/nvidia-application-profiles-384.130-rc \
            --slave /usr/share/nvidia/nvidia-application-profiles-384.130-key-documentation x86_64-linux-gnu_nvidia_app_profile_keys /usr/share/nvidia-384/nvidia-application-profiles-384.130-key-documentation \
            --slave /usr/lib/xorg/modules/drivers/nvidia_drv.so x86_64-linux-gnu_nvidia_drv /usr/lib/nvidia-384/xorg/nvidia_drv.so \
            --slave /etc/modprobe.d/nvidia-graphics-drivers.conf x86_64-linux-gnu_nvidia_modconf /lib/nvidia-384/modprobe.conf \
            --slave /usr/lib/x86_64-linux-gnu/xorg/extra-modules x86_64-linux-gnu_xorg_extra_modules /usr/lib/nvidia-384/xorg \
            --slave /usr/lib/vdpau/libvdpau_nvidia.so.1 x86_64-linux-gnu_libvdpau_nvidia.so.1 /usr/lib/nvidia-384/vdpau/libvdpau_nvidia.so.1 \
            --slave /usr/lib/libvdpau_nvidia.so x86_64-linux-gnu_libvdpau_nvidia.so /usr/lib/nvidia-384/vdpau/libvdpau_nvidia.so \
            --slave /usr/lib32/vdpau/libvdpau_nvidia.so.1 x86_64-linux-gnu_libvdpau_nvidia.so.1_lib32 /usr/lib32/nvidia-384/vdpau/libvdpau_nvidia.so.1 \
            --slave /usr/lib32/libvdpau_nvidia.so x86_64-linux-gnu_libvdpau_nvidia.so_lib32 /usr/lib32/nvidia-384/vdpau/libvdpau_nvidia.so
        update-alternatives --force \
            --install /etc/ld.so.conf.d/x86_64-linux-gnu_EGL.conf x86_64-linux-gnu_egl_conf /usr/lib/nvidia-384/ld.so.conf 8604


        # Alternative for PRIME power saving mode
        # In this case only intel is enabled and we only need to make
        # sure that nvidia-settings can be launched and that nouveau
        # is still blacklisted
        update-alternatives --force \
            --install /etc/ld.so.conf.d/x86_64-linux-gnu_GL.conf x86_64-linux-gnu_gl_conf /usr/lib/nvidia-384-prime/ld.so.conf 8603 \
            --slave /usr/share/man/man1/nvidia-xconfig.1.gz x86_64-linux-gnu_man_nvidiaxconfig.gz /usr/share/man/man1/alt-nvidia-384-xconfig.1.gz \
            --slave /usr/share/man/man1/nvidia-smi.1.gz x86_64-linux-gnu_nvidia-smi.1.gz /usr/share/man/man1/alt-nvidia-384-smi.1.gz \
            --slave /usr/bin/nvidia-smi x86_64-linux-gnu_nvidia_smi /usr/lib/nvidia-384/bin/nvidia-smi \
            --slave /usr/bin/nvidia-xconfig x86_64-linux-gnu_nvidia_xconfig /usr/lib/nvidia-384/bin/nvidia-xconfig \
            --slave /usr/bin/nvidia-bug-report.sh x86_64-linux-gnu_nvidia_bug_report /usr/lib/nvidia-384/bin/nvidia-bug-report.sh \
            --slave /usr/bin/nvidia-debugdump x86_64-linux-gnu_nvidia-debugdump /usr/lib/nvidia-384/bin/nvidia-debugdump \
            --slave /usr/share/nvidia/nvidia-application-profiles-384.130-rc x86_64-linux-gnu_nvidia_app_profile /usr/share/nvidia-384/nvidia-application-profiles-384.130-rc \
            --slave /usr/share/nvidia/nvidia-application-profiles-384.130-key-documentation x86_64-linux-gnu_nvidia_app_profile_keys /usr/share/nvidia-384/nvidia-application-profiles-384.130-key-documentation \
            --slave /etc/modprobe.d/nvidia-graphics-drivers.conf x86_64-linux-gnu_nvidia_modconf /lib/nvidia-384/modprobe.conf
        update-alternatives --force \
            --install /etc/ld.so.conf.d/x86_64-linux-gnu_EGL.conf x86_64-linux-gnu_egl_conf /usr/lib/nvidia-384-prime/ld.so.conf 8603

        if [ "$ARCH" != "armhf" ]; then
            # Install just the ld.so.conf.d alternative for the secondary architecture.
            # We need only to ensure that any mesa ld.so.conf.d alternative isn't active.
            update-alternatives --force \
                --install /etc/ld.so.conf.d/i386-linux-gnu_GL.conf i386-linux-gnu_gl_conf /usr/lib/nvidia-384/alt_ld.so.conf 8604
            update-alternatives --force \
                --install /etc/ld.so.conf.d/i386-linux-gnu_EGL.conf i386-linux-gnu_egl_conf /usr/lib/nvidia-384/alt_ld.so.conf 8604

            # Install just the ld.so.conf.d alternative for PRIME for the
            # secondary architecture.
            # We need to ensure that the NVIDIA libraries for the other
            # architecture are not used.
            update-alternatives --force \
                --install /etc/ld.so.conf.d/i386-linux-gnu_GL.conf i386-linux-gnu_gl_conf /usr/lib/nvidia-384-prime/alt_ld.so.conf 8603
            update-alternatives --force \
                --install /etc/ld.so.conf.d/i386-linux-gnu_EGL.conf i386-linux-gnu_egl_conf /usr/lib/nvidia-384-prime/alt_ld.so.conf 8603
        fi

        # Make sure glamoregl is disabled
        update-alternatives --force \
            --install /usr/share/X11/xorg.conf.d/glamoregl.conf glamor_conf \
            /usr/share/nvidia-384/glamor.conf 600

        # ldconfig needs to be run immediately as we're changing /etc/ld.so.conf.d/ with
        # alternatives.
        LDCONFIG_NOTRIGGER=y ldconfig

        CURRENT_KERNEL=$(uname -r)
        NEWEST_KERNEL=$(get_newest_kernel "$KERNELS")

        # Update initramfs so that the blacklist ends up in the initramfs
        if [ -x /usr/sbin/update-initramfs ]; then
            /usr/sbin/update-initramfs -u

            if [ -n "$NEWEST_KERNEL" ] && [ ${CURRENT_KERNEL} != ${NEWEST_KERNEL} ]; then
                # This can fail when dealing with a chroot see LP: #556653
                /usr/sbin/update-initramfs -u -k $CURRENT_KERNEL
            fi
        fi

        # Enable any quirks for the driver
        if [ `which quirks-handler` ]; then
           quirks-handler -e $PACKAGE_NAME -v
        fi

        if ! id "$NVPD_USER" > /dev/null 2>&1; then
            # Create the user and group for nvidia-persistenced
            adduser --system --no-create-home --home '/' \
            --shell '/sbin/nologin' \
            --gecos 'NVIDIA Persistence Daemon' \
            --group "$NVPD_USER"
        fi

        # If the delayed module build feature is enabled
        # i.e. if $DONT_BUILD_MODULE is set to 1
        # or if $TMP_FILE exists
        if [ "${DONT_BUILD_MODULE}1" -eq "11" ] || [ -e $TMP_FILE ]; then
            # Do not build the module and create
            # the Upstart script which will
            # build the module on next boot
            cat > $INIT_SCRIPT <<EOF
# Warning: This file is autogenerated by $PACKAGE_NAME. All changes to this file will be lost.

[Unit]
Description=Detect the available GPUs and deal with any system changes
Before=display-manager.service oem-config.service

[Service]
Type=oneshot
ExecStart=/bin/sh -ec '\
    /usr/sbin/dkms add -m $PACKAGE_NAME -v $CVERSION; \
    /usr/lib/dkms/dkms_autoinstaller start || ( rm -f $INIT_SCRIPT && exit 1 ); \
    /sbin/modprobe $PACKAGE_NAME || true ; \
    /bin/systemctl disable $INIT_SCRIPT_NAME || true ; \
    rm -f $INIT_SCRIPT'

[Install]
WantedBy=display-manager.service oem-config.service
EOF
            /bin/systemctl enable $INIT_SCRIPT_NAME
        else
            # Build the kernel module
            /usr/lib/dkms/common.postinst $PACKAGE_NAME $CVERSION /usr/share/$PACKAGE_NAME $ARCH $2
            exit $?
        fi
        ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
            echo "postinst called with unknown argument \`$1'" >&2
            exit 1
    ;;
esac


